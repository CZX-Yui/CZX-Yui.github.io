<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>（飞桨）AIGC技术与应用公开课笔记</title>
    <link href="/2023/04/06/%EF%BC%88%E9%A3%9E%E6%A1%A8%EF%BC%89AIGC%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/04/06/%EF%BC%88%E9%A3%9E%E6%A1%A8%EF%BC%89AIGC%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>摘要：百度飞桨关于AIGC在行业中应用的解读</p><span id="more"></span>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>玩一玩StableDiffution的WebUI</title>
    <link href="/2023/04/05/%E7%8E%A9%E4%B8%80%E7%8E%A9StableDiffution%E7%9A%84WebUI/"/>
    <url>/2023/04/05/%E7%8E%A9%E4%B8%80%E7%8E%A9StableDiffution%E7%9A%84WebUI/</url>
    
    <content type="html"><![CDATA[<p>摘要：本地Win11下部署Stable Diffusion模型，通过WebUI控制文本生成图片</p><span id="more"></span><hr><p>现在是2023年4月，基于Diffusion的AI生成图片模型的效能已经远超基于GAN的生成模型，目前主流的产品包括OpenAI的DALL·E2（2022.4）、某个小组织开发的MidJourney（2022.4）、开源的Stable Diffusion（2022.7）。三者在具体实现原理、作图风格等上都略有不同。作为一个刚接触该领域的萌新，我就想找一个较成熟的产品体验一下，最好该产品能开源代码方便DIY，而DALL·E2直接闭源，MidJourney还要基于他们的社交聊天软件才能用，于是果断选择Stable Diffusion作为我入门的第一步。</p><p>初次体验先试试大佬们基于Stable Diffusion做的一个WebUI控制台。其实现逻辑是：<strong>先下载开源的预训练模型，在本地部署，通过WebUI界面来操作。</strong>相比于MidJourney等在线作图的方式，在本地部署一套环境可以无视生成数量的限制，自由度高，但是对本机配置较高，要体验不同风格的模型还需预先下载（模型大到以GB为单位）。</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/589223078">理解DALL·E 2， Stable Diffusion和 Midjourney的工作原理</a></p></blockquote><h1 id="一、-本地环境配置"><a href="#一、-本地环境配置" class="headerlink" title="一、 本地环境配置"></a>一、 本地环境配置</h1><h2 id="1-配置Python环境"><a href="#1-配置Python环境" class="headerlink" title="1. 配置Python环境"></a>1. 配置Python环境</h2><ol><li><p>安装conda：直接上miniconda</p></li><li><p>创建虚拟环境，并激活进入</p></li><li><p>升级pip包，更改下载地址为清华镜像站</p></li></ol><h2 id="2-配置Git"><a href="#2-配置Git" class="headerlink" title="2. 配置Git"></a>2. 配置Git</h2><blockquote><p><a href="https://git-scm.com/download/win">Git - Downloading Package (git-scm.com)</a></p></blockquote><h2 id="3-安装CUDA"><a href="#3-安装CUDA" class="headerlink" title="3. 安装CUDA"></a>3. 安装CUDA</h2><ol><li>查看本机GPU驱动版本，去官网下载匹配的版本的CUDA</li><li>安装后在NVIDIA控制面板查看CUDA版本</li></ol><p><img src="/2023/04/05/%E7%8E%A9%E4%B8%80%E7%8E%A9StableDiffution%E7%9A%84WebUI/image-20230405100324214.png" alt="NVIDIA系统信息"></p><h2 id="4-克隆stable-diffusion-WebUI库"><a href="#4-克隆stable-diffusion-WebUI库" class="headerlink" title="4. 克隆stable diffusion WebUI库"></a>4. 克隆stable diffusion WebUI库</h2><ol><li><p>在希望克隆的文件夹下打开CMD</p></li><li><p>克隆项目源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/AUTOMATIC1111/</span>stable-diffusion-webui.git<br></code></pre></td></tr></table></figure></li><li><p>下载预训练模型（<a href="https://huggingface.co/stabilityai/stable-diffusion-2-1/blob/main/v2-1_768-ema-pruned.ckpt">地址</a>），并转移到对应文件夹<code>models\Stable-diffusion</code></p></li><li><p>进入项目根目录，运行<code>webui-user.bat</code> 即可完成本地Web部署</p><ul><li>如果长时间卡在Installing gfpgan(或者installing clip，installing open_clip)这个环节，那么进入F:\stable-diffusion-webui文件夹下面，找到launch.py这个文件，在第200多行到300行的位置在“<a href="https://link.zhihu.com/?target=https://github.com/xxx">https://github.com/xxx</a>”的最前面，加上：<code>https://ghproxy.com/</code>，相当于让原来从github下载相关程序包变成了走国内镜像下载相关程序包，这样会增加网络的稳定性和网络速度，此时需关闭梯子。</li></ul></li></ol><blockquote><p><a href="https://zhuanlan.zhihu.com/p/613530403">从零开始，手把手教你本地部署Stable Diffusion Webui AI绘画(Win系最新版) - 知乎 (zhihu.com)</a></p></blockquote><h1 id="二、WebUI操作指南"><a href="#二、WebUI操作指南" class="headerlink" title="二、WebUI操作指南"></a>二、WebUI操作指南</h1><h2 id="1-开启server流程："><a href="#1-开启server流程：" class="headerlink" title="1. 开启server流程："></a>1. 开启server流程：</h2><ol><li>在项目根目录下<code>E:\Stable_Diffusion_WebUI\stable-diffusion-webui</code>打开CMD，进入虚拟环境<code>sdwebui</code></li><li>执行<code>webui-user.bat</code>，浏览器打开<code>http://127.0.0.1:7860</code> 。（注意关掉梯子）</li></ol><p>（3. 完整执行<code>.\webui.bat --medvram --xformers</code>）</p><h1 id="三、提示词promot"><a href="#三、提示词promot" class="headerlink" title="三、提示词promot"></a>三、提示词promot</h1><h2 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h2><h2 id="2-参考其他开源模板"><a href="#2-参考其他开源模板" class="headerlink" title="2. 参考其他开源模板"></a>2. 参考其他开源模板</h2><p>​    如Civitai网站。选择参考的图片，复制其promot信息到UI中</p><blockquote><ul><li><a href="https://www.ptsearch.info/articles/list_best/">Prompt Search</a></li><li><a href="https://civitai.com/models/7240/meinamix">MeinaMix</a>: 二次元风格</li></ul></blockquote><h1 id="四、controlnet"><a href="#四、controlnet" class="headerlink" title="四、controlnet"></a>四、controlnet</h1><p>Controlnet 允许通过线稿、动作识别、深度信息等对生成的图像进行控制。 </p><h1 id="报错记录"><a href="#报错记录" class="headerlink" title="报错记录"></a>报错记录</h1><ul><li>不管什么操作都会报错：<code>Something went wrong Expecting value: line 1 column 1 (char 0)</code></li></ul><p>​    网络代理问题，关掉梯子，再重新启动服务器，之后就没问题了。</p><blockquote><p>[<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/9174">Bug]: Something went wrong Expecting value: line 1 column 1 (char 0) · Issue #9174 · AUTOMATIC1111/stable-diffusion-webui (github.com)</a></p></blockquote><ul><li>点击generate后报错：RuntimeError: Not enough memory, use lower resolution (max approx. 512x512). Need: 0.2GB free, Have:0.1GB free</li></ul><p>​    执行<code>.\webui.bat --medvram</code>，增加<code>--medvram</code></p><blockquote><p><a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Troubleshooting#low-vram-video-cards">Troubleshooting · AUTOMATIC1111/stable-diffusion-webui Wiki (github.com)</a></p></blockquote><ul><li>在生成图片过程中报错：AttributeError: ‘NoneType’ object has no attribute ‘local_data_path’</li></ul><p>​    <code>modules\realesrgan_model.py</code>中出现bug，参考下面的issue</p><blockquote><p>[[Bug]: AttributeError:    “NoneType’ object has no attribute ‘data_path’ · Issue #5170 · AUTOMATIC1111/stable-diffusion-webui (github.com)](<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/5170&quot;">https://github.com/AUTOMATIC1111/stable-diffusion-webui/issues/5170&quot;</a></p></blockquote><ul><li>生成图片到一半就卡住，然后报错CUDA out of memory</li></ul><p>​    GPU性能不够，将<code>Upscale by</code>设置为1，图片size最高支持到512x1024</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote><ul><li>SD模型源码地址：<a href="https://github.com/CompVis/stable-diffusion">CompVis/stable-diffusion: A latent text-to-image diffusion model (github.com)</a></li><li>SD_WebUI项目地址：<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">AUTOMATIC1111/stable-diffusion-webui: Stable Diffusion web UI (github.com)</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI2NTQ0MjY5Nw==&mid=2247484745&idx=1&sn=2c4ae77c2138d561b45de5f4002d2b77&chksm=ea9c01afddeb88b92ffbec68c7badf6e0836f43977650c0bbb3eeb04ca1adfbe3ac43a2de28d&scene=21#wechat_redirect">如何用AI绘图画出超真实的小姐姐？</a></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>AIGC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI绘画</tag>
      
      <tag>Stable_Diffusion</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用操作与深入理解</title>
    <link href="/2023/04/04/Git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <url>/2023/04/04/Git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>摘要：学习Git的基本用法，发掘内部原理，理解与GitHub的关联流程，以及优雅地解决连接GitHub失败的问题</p><span id="more"></span><h1 id="一、Git本地操作与内部原理"><a href="#一、Git本地操作与内部原理" class="headerlink" title="一、Git本地操作与内部原理"></a>一、Git本地操作与内部原理</h1><h2 id="1-init、add、commit背后的原理"><a href="#1-init、add、commit背后的原理" class="headerlink" title="1. init、add、commit背后的原理"></a>1. init、add、commit背后的原理</h2><ol><li><code>git init</code> ：拿到一个新文件夹，希望将其交给git管理，在该目录下执行init，创建一个.git文件夹，里面即存储文件及对应版本信息</li><li><code>git add xxx.txt</code>：将一个txt文件纳入当前版本的管控之下。git会计算该文件的SHA1值做该文件及该版本的唯一<strong>身份证</strong>，当修改该文件后，这个SHA1值就变更了，对git来说就是一个新文件。</li><li><code>git commit</code>：首先将当前版本的所有文件的目录结构做一个<strong>快照</strong>，记录每个文件的权限、文件名、SHA1值等；然后新建一个commit节点指向该快照，这个节点记录了本次提交的信息（快照的SHA1值）、上次commit的信息（便于回溯）、备注等。</li></ol><blockquote><p>本质上git仓库就是<strong>一个key-value的数据库加上默克尔树形成的有向无环图（DAG）</strong></p></blockquote><blockquote><p>可视化：<a href="https://zhuanlan.zhihu.com/p/96631135">这才是真正的Git——Git内部原理揭秘！</a></p><p><a href="https://marklodato.github.io/visual-git-guide/index-zh-cn.html#basic-usage">图解Git (marklodato.github.io)</a></p></blockquote><h2 id="2-操作指南"><a href="#2-操作指南" class="headerlink" title="2. 操作指南"></a>2. 操作指南</h2><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p></blockquote><h1 id="二、关联远程仓库GitHub"><a href="#二、关联远程仓库GitHub" class="headerlink" title="二、关联远程仓库GitHub"></a>二、关联远程仓库GitHub</h1><h2 id="1-关联远程仓库"><a href="#1-关联远程仓库" class="headerlink" title="1. 关联远程仓库"></a>1. 关联远程仓库</h2><p>git和GitHub是两回事，git是本地版本控制软件，GitHub是远程版本控制仓库。通俗理解就是，git安装在本地，权力范围只有本地被初始化git的文件夹，而GitHub存在在云端（且往往是分布式，可能在存在在好几个人的电脑上），只是个任人进出的仓库。</p><h3 id="先本地创建仓库，再关联到云端"><a href="#先本地创建仓库，再关联到云端" class="headerlink" title="先本地创建仓库，再关联到云端"></a>先本地创建仓库，再关联到云端</h3><ul><li>准备好本地仓库，在某个文件夹下执行<code>git init</code></li><li>准备好远程仓库，在GitHub上新建一个仓库</li><li>执行同步命令<code>git remote add origin git@github.com:CZX-Yui/xxxx.git</code> ，现在以及建立起本地文件夹和远程GitHub仓库的联系了<ul><li>远程库的名字就是<code>origin</code>，这是git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</li></ul></li><li>之后每次有文件更新，用<code>git push origin main</code>将本地更新同步到远程仓库<ul><li>main是远程分支的名称</li></ul></li></ul><h3 id="云端已有仓库，拉取到本地"><a href="#云端已有仓库，拉取到本地" class="headerlink" title="云端已有仓库，拉取到本地"></a>云端已有仓库，拉取到本地</h3><ul><li>找到云端仓库的SSH链接</li><li>在本地文件夹下执行<code>git clone ssh://xxxx</code></li></ul><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416">远程仓库 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p></blockquote><h2 id="2-GitHub通信方式及断网问题总结"><a href="#2-GitHub通信方式及断网问题总结" class="headerlink" title="2. GitHub通信方式及断网问题总结"></a>2. GitHub通信方式及断网问题总结</h2><h3 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h3><ul><li>常见连不上报错（连不上server、超时等等），大概率都是因为采用HTTP协议连接远程仓库，如clone仓库时目标仓库地址是http打头、链接远程库时地址也是http打头等等</li><li>一种解决策略是设置代理，但不是很稳定，建议用下面的方法</li><li>另一种解决策略是花点时间配置SSH。养成好习惯，每次涉及到使用GitHub链接时都写成SSH形式。</li></ul><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><ul><li><p>在使用过程中，除了好几个与git管理版本相关的命令让人摸不着头脑外（主要是不太理解背后的原理），最让人头疼的就是本地git连接远程GitHub仓库频频报错的问题了（感谢防火墙）。</p></li><li><p>为了彻底解决这个问题，还得从背后原理上搞明白。首先得明确访问远程Github仓库的几种通信协议：HTTPS和SSH。</p><ul><li><p>HTTP/HTTPS是最基本的通信方式，方便快捷，不管收端是谁、在哪，只要能拿到发端的http链接，就能直接访问，因此也容易受到墙的限制，而SSH相比HTTP多加了一层“保护壳”，会在收发端通信的过程中自动加密和解密，这种安全传输（“隧道”）允许穿过防火墙，但是其灵活性较差，收端和发端固定只有那两个设备/地址。简单来说，举个例子，通过HTTP方式clone仓库可以在任意设备上克隆任意地址的仓库，而通过SSH方式只能在配置了密钥的两台设备间clone/push仓库。SSH的优势就在于连接稳定、push的时候不需要每次输入密码来证明我是该用户。</p></li><li><p>网上一种说法“使用SSH的URL克隆的话，你必须是这个项目的拥有者“，这种表述不完全正确，对于GitHub上的公开库，你可能不是该项目的拥有者或管理员，但当你配置好本机和GitHub的SSH连接后，你依然可以通过SSH来clone所有的GitHub公开库。</p></li></ul></li></ul><blockquote><p><a href="https://zhuanlan.zhihu.com/p/46243205#:~:text=ssh%E5%8D%8F%E8%AE%AE%E9%87%8C%E9%9D%A2%E5%B0%81,%E7%A0%B4%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E9%99%90%E5%88%B6%E3%80%82">SSH Tunnel绕过防火墙穿透内网 - 知乎 (zhihu.com)</a></p></blockquote><h3 id="配置HTTP代理（不推荐）"><a href="#配置HTTP代理（不推荐）" class="headerlink" title="配置HTTP代理（不推荐）"></a>配置HTTP代理（不推荐）</h3><ul><li><p>首先得配置好梯子，查看本机梯子http走的端口</p></li><li><p>使用下述命令配置全局代理</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:7890</span><br></code></pre></td></tr></table></figure></li></ul><blockquote><p><a href="https://ericclose.github.io/git-proxy-config.html">一文让你了解如何为 Git 设置代理 - Eric (ericclose.github.io)</a></p></blockquote><h3 id="配置SSH（推荐）"><a href="#配置SSH（推荐）" class="headerlink" title="配置SSH（推荐）"></a>配置SSH（推荐）</h3><ul><li>本机查看私钥和公钥</li><li>将公钥复制一份到GitHub的个人账号下</li></ul><blockquote><p><a href="https://blog.csdn.net/weixin_42310154/article/details/118340458">Github配置ssh key的步骤（大白话+包含原理解释）</a></p><p><a href="https://zhuanlan.zhihu.com/p/481574024">设置代理解决github被墙 - 知乎 (zhihu.com)</a></p></blockquote><h1 id="三、Demo实践"><a href="#三、Demo实践" class="headerlink" title="三、Demo实践"></a>三、Demo实践</h1><p>抽空复习试一试，顺便做一下常用命令总结</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo框架搭建个人博客网站并部署在GitHub上</title>
    <link href="/2023/04/02/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%9C%A8GitHub%E4%B8%8A/"/>
    <url>/2023/04/02/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%9C%A8GitHub%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<p>摘要：记录第一次搭建个人博客的全过程，学会了简单的网页部署，搭建了一个十分舒服的知识管理系统，Nice！技术栈包括Hexo基本框架，Fluid主题，GitHub.io云端部署等</p><span id="more"></span><hr><blockquote><p>引言：我为什么要开始写博客？</p></blockquote><p>不是所有的程序员都写博客，但是优秀的程序员都有写博客的习惯。因为这一门职业必备两项基本素质：<strong>持续学习</strong>和<strong>开源精神</strong>，写博客的过程正是践行了这两点。坚持每日学习，吸收前沿知识和最新信息，通过写博客的方式进行自我总结和思考，并开源到互联网上供他人参考与交流。此外，在写博客和运营网站的过程中，还能提高自己的语言表达能力、问题理解与解释能力、设计与艺术能力等。总之，每天抽一点时间做做总结，每周再反思归纳归纳，对一个人技术水平的提升是大有裨益的。</p><p>这周末花了两天时间，总算是搭建好了自己的博客系统，趁热打铁赶紧总结一波，作为本站的第一篇文章。我将先复盘搭建博客系统的全部配置细节，再总结日后使用的流水线操作方法。</p><hr><h1 id="一、博客系统配置"><a href="#一、博客系统配置" class="headerlink" title="一、博客系统配置"></a>一、博客系统配置</h1><p>我的需求一开始是想做一个知识汇总用的笔记软件，因为一直用的Notion，非常好用，但是怕毕业了没有学校的邮箱（可以免费用），而购买它的服务又太贵了（每个月5刀），而且总觉得自己的东西放在别人的平台上不太放心，万一哪天公司跑路了东西就都没了，而且人家还是个美国公司（虽然老板是华裔）。因此选择了博客这个平台来做知识管理，将每天的随笔、笔记什么的保留在互联网上，而且公开可见，万一做的好的话还能增加流量出个名什么的hhh（主要还是自己总结用啦）。</p><p>调研了一下现有的搭建博客方案，一种方案是直接用现有平台的（CSDN、博客园、掘金、简书、知乎等等），比较方便，容易被搜索引擎搜到，但是功能较单一，扩展性差，风格固化，最不能忍受的是还有广告牛皮癣！而另一种方案是本地建站再部署到云端，DIY成分更多，但是难度也大，需要对全栈有个基本了解。以后我的目标是用方案二，但是现在初步入门还是先快速搭建出一个Demo较好（劝退警告），因此我选择的方案是介于两者之间的：<strong>本地采用md写作，再用博客生成框架直接转译成网站源码，再通过GitHub部署到云端。</strong></p><p>三步流程的技术选型：</p><ul><li><p><strong>本地markdown写作</strong>：使用<strong>Typora</strong>，永久购买89元。（看到一句话被激励到，立刻购买了：你愿意花大几百去买游戏，却不愿意花几十块买个好用的生产力工具？）</p></li><li><p><strong>本地建站框架</strong>：其实最佳的建站方法是自己写网站代码，灵活度高，但是对新手不友好。因此这部分选择目前主流的“纯文本md转译为HTML的博客建站框架”，GitHub官方推荐的是Jekyll框架，尝试了下因为不方便修改风格而且教程较老就放弃了，目前选择的是<strong>Hexo</strong>框架，搭配开源主题插件<strong>Fluid</strong>，美&amp;爽！</p></li><li><p><strong>云端部署</strong>：采用<strong>GitHubPages</strong>功能。GitHub界面美观且功能强大，还提供了免费的网站部署（虽然资源受限，但是做个博客绰绰有余了）。</p></li></ul><p>本地环境：基于Windows11系统，在LEGION2022-R7000笔电上安装，默认已配置好VPN（随时会用）</p><h2 id="1-本地环境配置"><a href="#1-本地环境配置" class="headerlink" title="1. 本地环境配置"></a>1. 本地环境配置</h2><p>本地配置的目标是完成本地建站功能，至于部署到云端再到怎么能成功访问就是GitHub帮我们做好的事情了。因此需要配置用于本地建站的<strong>Node.js</strong>和用于GitHub部署的<strong>git</strong>。有了这个基础，再去安装博客转译框架<strong>Hexo</strong>。</p><ol><li>安装<a href="https://nodejs.org/en">Node.js</a></li><li>安装<a href="https://git-scm.com/">Git</a></li><li>安装<a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85">Hexo</a></li></ol><p>安装完成使用-v命令查看版本测试安装是否成功。注意查看Hexo版本必须在安装Hexo的目录下看（我的是MyBlog博客根目录），否则不显示Hexo的版本只显示hexo-cli的版本。</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85">Hexo官方教程（安装）</a></p><p><a href="https://cloud.tencent.com/developer/article/1662732">Hexo博客详细教程（一）| 建立本地站点 - 腾讯云开发者社区 </a></p></blockquote><h2 id="2-本地建站与项目文件说明"><a href="#2-本地建站与项目文件说明" class="headerlink" title="2. 本地建站与项目文件说明"></a>2. 本地建站与项目文件说明</h2><h3 id="建站流程"><a href="#建站流程" class="headerlink" title="建站流程"></a>建站流程</h3><h4 id="1-初始化站点"><a href="#1-初始化站点" class="headerlink" title="1. 初始化站点"></a>1. 初始化站点</h4><ol><li>第一次建站，选择一个文件夹作为站点根目录，在终端打开，执行以下命令新建文件</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> hexo init &lt;folder&gt;<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;folder&gt;<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><ol start="2"><li><p>此时直接运行<code>hexo s</code>即可在本地部署demo网站，启动server，打开本地浏览器链接即可访问</p></li><li><p>之后每一次执行修改，重新生成站点页面时都需要先运行<code>hexo clean</code>清除历史，再运行<code>hexo g</code>生成HTML页面</p></li></ol><blockquote><p><a href="https://hexo.io/zh-cn/docs/setup">Hexo官方教程（建站）</a></p></blockquote><h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h4><ol><li><p>修改根目录下的_config.yml文件，这是站点全局配置文件。使用vscode打开，参考官方教程进行配置。</p></li><li><p>修改默认模板文件post.md，添加Front-matter字段。（添加标签、分类等便于管理）</p></li></ol><blockquote><p><a href="https://hexo.io/zh-cn/docs/configuration">Hexo官方教程（配置）</a></p><p><a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a></p></blockquote><h4 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3. 更换主题"></a>3. 更换主题</h4><p>默认的主题不好看，下载安装Fluid主题。参考官方文档进行配置。</p><p>我用npm install方法将hexo-theme-fluid安装在node_module库中，并将其中的配置文件复制到根目录下_config.fluid.yml，在这里配置和主题相关的事项。</p><p>主题文件夹里的source和根目录下的source在编译后会合并，因此保存图片优先放在根目录下的source的images文件夹里。</p><blockquote><p><a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">开始使用 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><p><a href="https://hexo.fluid-dev.com/docs/guide/">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p></blockquote><h3 id="项目文件组织说明"><a href="#项目文件组织说明" class="headerlink" title="项目文件组织说明"></a>项目文件组织说明</h3><p>项目文件组织如下：大部分都是配置文件，核心放md文档的文件只有source</p><ul><li>.github：git配置文件</li><li>themes：网站主题，类似布局模板。没下载一个主题就会将主题文件夹放在该文件夹里，核心是主题的_config.yml配置文件，里面一般定义页面的标题、链接啥的</li><li>source：存放每个单独博文的md文件、md文件对应的图片文件夹，新建page后还能按category、tag管理（和主题相关，有的主题可能没有）</li><li>node_modules：node.js的lib库</li><li>scaffolds：md文件的模板文件，新建post、page、draft会自动复制里面的模板。模板里只定义了yml头字段，部分自动写好（title、date），其余在写文章时需自行填写。每次新建md文件默认拷贝post.md，如果有什么需要通用的修改（关于Front-matter或者全文通用模板）可以直接修改该文件。</li><li>public：<code>hexo g</code>后生成的网站文件，该文件夹可以单独拿出来，当作网站部署的源码</li><li>.deploy_git：<code>hexo d</code>后生成的git部署文件，用于和GitHub同步</li><li>_config.yml：核心文件，全局配置</li><li>_config.fluid.yml：核心文件，主题相关全局配置（我的主题名为fluid）</li><li>.npmignore/package.json/package-lock.json/db.json：其余配置文件</li></ul><p><img src="/2023/04/02/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%9C%A8GitHub%E4%B8%8A/image-20230403114238355.png" alt="项目文件组织"></p><h2 id="3-远程部署到GitHub的两种方式"><a href="#3-远程部署到GitHub的两种方式" class="headerlink" title="3. 远程部署到GitHub的两种方式"></a>3. 远程部署到GitHub的两种方式</h2><ul><li>初次使用：在GitHub上建库，尾缀为.github.io</li><li>安装git部署插件：<code>npm install hexo-deployer-git --save</code></li></ul><h3 id="1-简易部署"><a href="#1-简易部署" class="headerlink" title="1. 简易部署"></a>1. 简易部署</h3><p>具体流程理解为：先在本地生成页面文件，存在public文件夹下，再将public文件夹同步到GitHub库的main分支上，并自动触发action的pages build and deployment流程</p><ol><li>将全局配置文件_config.yml配置如下：repo地址设置为ssh连接，因为之前设置了本地连GitHub用的ssh密钥，这样比较稳定</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:CZX-Yui/CZX-Yui.github.io.git<br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure><ol start="2"><li><p>每次更新完后，在根目录下先<code>hexo clean</code>，再部署站点：<code>hexo d</code> </p></li><li><p>刷新GitHub可以看到已经被同步，再打开个人博客网站刷新即可更新（GitHub部署较慢要等几分钟）</p></li></ol><blockquote><p><a href="https://cloud.tencent.com/developer/article/1662782">Hexo博客教程（三）| Github、Coding 部署Hexo站点详解 - 腾讯云开发者社区</a></p></blockquote><h3 id="2-开辟新分支部署备份库（推荐）"><a href="#2-开辟新分支部署备份库（推荐）" class="headerlink" title="2. 开辟新分支部署备份库（推荐）"></a>2. 开辟新分支部署备份库（推荐）</h3><p>简易部署只将编译后的网页文件同步在GitHub库上，现在希望将源文件也同步在该库中。新建一个分支source来专门同步源文件。再利用action功能，每次push到source后触发，执行文件编译并部署。这种模式的好处在于可以在线修改文档再直接GitHub网站上提交，当手边的机器没有node、hexo环境时非常好用。</p><ol><li><p>在GitHub该库中新建分支source，并设置为默认分支</p></li><li><p>在本地站点根目录初始化git仓库，创立source分支，删除public文件、主题文件夹里的.git文件，再将本地目录与远程仓库关联（SSH关联）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git init<br>git checkout -<span class="hljs-selector-tag">b</span> source<br>hexo clean<br>git remote add origin git@github<span class="hljs-selector-class">.com</span>:CZX-Yui/CZX-Yui<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span>.git<br></code></pre></td></tr></table></figure></li><li><p>新建.gitignore，配置如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br></code></pre></td></tr></table></figure></li><li><p>在站点根目录下新建<code>.github/workflows/pages.yml</code>，添加内容如下，解释写在注释里</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Pages</span><br><br><span class="hljs-attr">on:</span>                 <span class="hljs-comment"># 触发条件：push到分支source的时候</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">source</span> <span class="hljs-comment"># default branch</span><br><br><span class="hljs-attr">jobs:</span>               <span class="hljs-comment"># 触发后执行任务</span><br>  <span class="hljs-attr">pages:</span><span class="hljs-comment"># 任务名</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">permissions:</span><br>      <span class="hljs-attr">contents:</span> <span class="hljs-string">write</span><br>    <span class="hljs-attr">steps:</span>   <span class="hljs-comment"># 任务步骤，每行-打头表示一个任务</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">16.</span><span class="hljs-string">x</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;16.18.0&quot;</span><span class="hljs-comment"># 改成和本地环境一致</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">NPM</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.OS</span> <span class="hljs-string">&#125;&#125;-npm-cache</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">publish_branch:</span> <span class="hljs-string">main</span><span class="hljs-comment"># 部署到main节点，该节点同步页面文件</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><span class="hljs-comment"># 部署源文件的目录</span><br><br></code></pre></td></tr></table></figure></li><li><p>推送三连：add、commit、push</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">git add .<br>git commit -m <span class="hljs-string">&#x27;hexo source post&#x27;</span><br>git <span class="hljs-keyword">push</span> origin <span class="hljs-keyword">source</span><br></code></pre></td></tr></table></figure></li></ol><blockquote><p><a href="https://hexo.io/zh-cn/docs/github-pages.html">在 GitHub Pages 上部署 Hexo | Hexo</a></p><p><a href="https://www.jianshu.com/p/8814ce1da7a4">使用git分支保存hexo博客源码到github </a></p><p><a href="https://docs.github.com/zh/actions/using-workflows/workflow-syntax-for-github-actions">GitHub Actions 的工作流语法 - GitHub 文档</a></p></blockquote><h1 id="二、新建博客流水线"><a href="#二、新建博客流水线" class="headerlink" title="二、新建博客流水线"></a>二、新建博客流水线</h1><ol><li><p>进入<strong>本地站点根目录</strong><code>D:\Documents\Github.io\MyBlog</code> ，在终端中打开</p></li><li><p>新建博客： <code>hexo new &lt;title&gt;</code> ，进入source-&gt;_posts，用Typora打开对应的md文件</p></li><li><p>愉快地编写markdown。</p><ol><li><p>设置index和banner图片，拷贝到source/images两个对应文件夹中。重命名尾部数字，更改到md文档的Front-matter部分的两个字段。</p></li><li><p>插入图片时：</p><ul><li><p>本地图片：直接copy进来，修改路径只保留图片名（若要在Typora里显示就改“格式–图像–设置图像根目录”）</p></li><li><p>网络图片：复制图片链接，写一段插入图片的md语法</p></li></ul></li><li><p>记得编写文章头部的摘要，100字以内</p></li></ol></li><li><p>（可选）本地发布测试：在终端执行 <code>hexo clean ; hexo g ; hexo s</code></p></li><li><p><del>（简易部署）部署到GitHub上：在终端执行<code>hexo clean ; hexo d</code></del></p></li><li><p>（备份部署）最好先在本地测试没问题了，再将源文件同步到GitHub，自动执行部署</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">add</span> .<br><span class="hljs-symbol">git</span> commit -m <span class="hljs-string">&quot;xxxx&quot;</span><br><span class="hljs-symbol">git</span> <span class="hljs-keyword">push</span> origin source<br></code></pre></td></tr></table></figure></li></ol><h1 id="三、其余细节问题"><a href="#三、其余细节问题" class="headerlink" title="三、其余细节问题"></a>三、其余细节问题</h1><h3 id="1-新建博客时命名注意"><a href="#1-新建博客时命名注意" class="headerlink" title="1. 新建博客时命名注意"></a>1. 新建博客时命名注意</h3><ul><li>不要出现“+”号，否则会自动识别为“-”号，造成后续导入图片时与默认“typora-root-url”命名不符合。尽量命名不要出现特殊符号</li></ul><h3 id="2-Typora图片插入"><a href="#2-Typora图片插入" class="headerlink" title="2. Typora图片插入"></a>2. Typora图片插入</h3><ul><li>本地插入图片时默认图片地址为“**/xxx.jpg**”，在官方<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>插件中存在bug，插件希望图片地址前面没有反斜杠“/”，因此不能识别到该地址出现bug。直接的解法是在每次插入图片后手动删掉反斜杠，但是太麻烦了。我尝试直接去node_modules源码里面修改，成功：hexo-renderer-marked/lib/<strong>renderer.js</strong>文件中，删掉下面标黄的部分，即允许文件名从“/”开头。</li></ul><p><img src="/2023/04/02/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%9C%A8GitHub%E4%B8%8A/hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84bug.png" alt="hexo插入图片的bug"></p><ul><li>图片中含有中文出错：在Typora偏好设置-&gt;图像，不要勾选插入时自动转译图像URL，否则会将中文转译成ASCII码，在Hexo插件转译路径时不匹配出错。</li><li>（TODO）图片进行缩放出错：缩放后默认格式变化，Hexo插件识别不了，这个暂时没有解决</li><li>0406发现新BUG：用同步GitHub源文件再自动部署的方法，GitHub的在线环境没有修改该BUG，还是会出现图片路径转译出错的问题。即上述解法只适用于本地调试好、再hexo d部署的方式，而且上述解法中默认地址为“xxx.jpg”是因为在typora里设置图片的根目录为md同名文件夹了，每次都要设置太麻烦。所以最优解法还是每次插入图片后都改一下图片路径，只保留图片名称。若要在Typora里显示，就改图片根目录</li></ul><blockquote><p><a href="https://hexo.io/zh-cn/docs/asset-folders#%E4%BD%BF%E7%94%A8-Markdown-%E5%B5%8C%E5%85%A5%E5%9B%BE%E7%89%87">资源文件夹 | Hexo</a></p><p>类似问题：<a href="https://github.com/hexojs/hexo-renderer-marked/issues/216">md img render part improvement of hexo-render-marked · Issue #216 ·</a></p><p><a href="https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/">typora + hexo博客中插入图片 | yinyoupoet的博客</a></p></blockquote><h3 id="3-部署github报错"><a href="#3-部署github报错" class="headerlink" title="3. 部署github报错"></a>3. 部署github报错</h3><ol><li><p>上传出错</p><ul><li><p>报错内容：<code>err: Error: Spawn failed</code></p></li><li><p>解决方法：将原来的部署配置改成ssh连接</p></li></ul></li></ol><blockquote><p><a href="https://blog.csdn.net/weixin_41256398/article/details/117994899">Hexo部署出现错误err: Error: Spawn failed解决方式</a></p><p><a href="https://github.com/hexojs/hexo-deployer-git">hexojs/hexo-deployer-git: Git deployer plugin for Hexo. (github.com)</a></p></blockquote><ol start="2"><li><p>部署出错</p><ul><li>通过F12排查问题，CSS文件问题，文件路径的问题</li><li>在站点根目录的_config.yml文件中加入一行：<code>root: /</code></li></ul></li></ol><blockquote><p><a href="https://blog.csdn.net/StarryaSky/article/details/83378011">hexo+Github搭建博客，能访问但无法加载css文件_StarryaSky的博客-CSDN博客</a></p></blockquote><h3 id="4-设置帖子的摘要并限制字数"><a href="#4-设置帖子的摘要并限制字数" class="headerlink" title="4. 设置帖子的摘要并限制字数"></a>4. 设置帖子的摘要并限制字数</h3><ul><li><p>Hexo官方文档建议在Front-matter处添加字段“excerpt”，并在其后添加摘要描述，这种方法不太优雅不够灵活。</p></li><li><p>Hexo官方还提供了一种<a href="https://hexo.io/zh-cn/docs/tag-plugins#%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%92%8C%E6%88%AA%E6%96%AD">配置</a>，在文章开头使用 <code>&lt;!-- more --&gt;</code>，那么 <code>&lt;!-- more --&gt;</code> 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。测试发现大概可以写100个字以内能完全展示。</p></li><li><p>这部分已经内置到post.md中，以后直接copy即可</p></li></ul><h3 id="5-每个帖子背景图片配置"><a href="#5-每个帖子背景图片配置" class="headerlink" title="5. 每个帖子背景图片配置"></a>5. 每个帖子背景图片配置</h3><ul><li><p>参考<a href="https://hexo.fluid-dev.com/docs/guide/#%E6%96%87%E7%AB%A0%E5%9C%A8%E9%A6%96%E9%A1%B5%E7%9A%84%E5%B0%81%E9%9D%A2%E5%9B%BE">Fluid文档关于文章页</a>的描述，可以在md文章Front-matter处添加字段<code>index_img</code>显示文章在首页的小图和<code>banner_img</code>显示文章在详情页的背景大图。</p></li><li><p>如果不指定这两个值，会采用_config.fluid.yml中配置的默认值</p></li><li><p>配置路径标准：不一定要绑定每一篇文章，可以随机一些。全部放在source/images下，分别建立两个文件夹，一个存index图片，一个存banner图片。图片命名以数字结尾。图片格式为png。在post.md模板中定义为：(注意图片名称x替换为数字)</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">index_img: <span class="hljs-regexp">/images/i</span>ndex_img/index_img_x.png<br>banner_img: <span class="hljs-regexp">/images/</span>banner_img/banner_img_x.png<br></code></pre></td></tr></table></figure></li></ul><h3 id="6-hexo-new-page的作用是什么？"><a href="#6-hexo-new-page的作用是什么？" class="headerlink" title="6. hexo new page的作用是什么？"></a>6. hexo new page的作用是什么？</h3><p>TODO。。。</p><h3 id="7-增加文章在线编辑功能"><a href="#7-增加文章在线编辑功能" class="headerlink" title="7. 增加文章在线编辑功能"></a>7. 增加文章在线编辑功能</h3><ul><li>需要先完成备份部署的配置。希望实现的流程是每次写完本地md，直接推送源码到git，使用git action自动部署，就不用本地做<code>hexo d</code>的操作了。</li><li>（TODO）还是GitHub action的问题，yml配置的问题</li></ul><h3 id="8-新环境下拉取GitHub并部署环境"><a href="#8-新环境下拉取GitHub并部署环境" class="headerlink" title="8. 新环境下拉取GitHub并部署环境"></a>8. 新环境下拉取GitHub并部署环境</h3><p>（TODO）当换主机时。。。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><ul><li><p><a href="https://pages.github.com/">GitHub Pages</a></p></li><li><p><a href="https://hexo.io/zh-cn/">Hexo</a></p></li><li><p><a href="https://hexo.fluid-dev.com/docs/">Fluid</a></p></li></ul><h4 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h4><ul><li><p>灵活配置好md文章中Front-matter的部分，这是每篇文章将如何在页面中展示的“控制台”。以及_config.yml文件，这是全局样式配置的“控制台”。</p></li><li><p>搭建过程中遇到问题主要还是参考官方文档的说明，相比于到处找帖子而且说的都不一样，官方文档会及时更新，有啥bug都会及时修正。因为这个框架也算是各个玩家们的作品，少有盈利组织在专门运维，有点bug很正常。</p></li><li><p>常常遇到本地建站测试没问题，一部署到GitHub就会出现问题，这时开源打开F12debug，一般是链接出错。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>web_dev</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
